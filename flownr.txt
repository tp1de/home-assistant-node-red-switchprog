[
    {
        "id": "ec85190199f8db30",
        "type": "tab",
        "label": "EMS switchPrograms",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1a31492a99eda9c8",
        "type": "catch",
        "z": "ec85190199f8db30",
        "name": "Schedule not found for update",
        "scope": [
            "926d5eac743f21de"
        ],
        "uncaught": false,
        "x": 580,
        "y": 260,
        "wires": [
            [
                "a7e6bd8d2475f644"
            ]
        ]
    },
    {
        "id": "190c6f63515decea",
        "type": "api-call-service",
        "z": "ec85190199f8db30",
        "name": "Add",
        "server": "9a4d97de.389e18",
        "version": 7,
        "debugenabled": false,
        "action": "scheduler.add",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "labelId": [],
        "data": "{{{payload}}}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "scheduler",
        "service": "add",
        "x": 1030,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "a7e6bd8d2475f644",
        "type": "function",
        "z": "ec85190199f8db30",
        "name": "entity does not exist",
        "func": "let e = msg.error.message;\nif (e.includes(\"Entity not found\")) {\n    let data = JSON.parse(msg.payload);\n    let name = data.name;\n    let weekdays = data.weekdays;\n    let timeslots = data.timeslots;\n\n    msg.payload = {\n        \"name\": name,\n        \"weekdays\": weekdays,\n        \"timeslots\": timeslots,\n        \"repeat_type\": \"repeat\"\n    };\n\n    msg.payload = JSON.stringify(msg.payload);\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 260,
        "wires": [
            [
                "190c6f63515decea"
            ]
        ]
    },
    {
        "id": "f3f287d87b3bbecc",
        "type": "comment",
        "z": "ec85190199f8db30",
        "name": "EMS+ switchPrograms",
        "info": "RC310 thermostat\nEach hc has 2 switchPrograms A and B and 2 variants with level and temps. \nDhw has another 2 switchPrograms.\n\nFor dhw there are 2 switchPrograms:\n01FF for warm water buffer load and 0209 for circulation pump \n\nThe heating circuits can be set to use levels (eco/comfort) or absolute temps per switchTime.\nThese are different telegram types the to be used. \n\nThe switch is done by the entity hcx/switchprogmode for each heating circuit between levels and absolute (temps).\nThese entities have been build-in just recently.\n\nswitchProgram A: hc1 telegrams level/temps are: 01C3 / 0583 and hc2: 01C4 / 0584\nswitchProgram B: hc1 telegrams level/temps are: 0349 / 058D and hc2: 034A / 058E",
        "x": 180,
        "y": 40,
        "wires": []
    },
    {
        "id": "5069364a4bf55b59",
        "type": "mqtt in",
        "z": "ec85190199f8db30",
        "name": "",
        "topic": "ems-esp/thermostat_switchprog",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "55818f4589a91a79",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 200,
        "wires": [
            [
                "7f3e3804907689d7"
            ]
        ]
    },
    {
        "id": "f3516d8302d538d6",
        "type": "function",
        "z": "ec85190199f8db30",
        "name": "prepare schedule",
        "func": "\nlet name = msg.payload;\nlet entity_id = \"switch.schedule_\" + name;\nentity_id = entity_id.replaceAll(\" \",\"_\").toLowerCase();\n\nlet weekdays = [];\nweekdays.push(msg.days);\nlet timeslots = [];\nlet id = msg.id;\nlet service = msg.service;\n\nif (msg.sp == undefined) {\n    let sdata = { hvac_mode: \"heat\", temperature: 18 };\n    timeslots.push({ start: \"00:00:00\", stop: \"08:00:00\", actions: [{ service: service, entity_id: id, service_data: sdata }] });\n    sdata = { hvac_mode: \"heat\", temperature: 21 };\n    timeslots.push({ start: \"08:00:00\", stop: \"00:00:00\", actions: [{ service: service, entity_id: id, service_data: sdata }] });\n}\n\nelse {\n    let sdata;\n    let start = \"00:00:00\";\n    let stop = msg.sp[0].time + \":00\";\n    \n    if (service == \"climate.set_temperature\") {\n        let temp = msg.sp[msg.sp.length - 1].temp; \n        sdata = { hvac_mode: \"heat\", temperature: temp };    \n    }\n    if (service == \"select.select_option\") {\n        let mode = msg.sp[msg.sp.length - 1].mode; \n        sdata = { option: mode };\n    }\n    if (service == \"input_select.select_option\") {\n        let mode = msg.sp[msg.sp.length - 1].mode;\n        sdata = { option: mode };\n    }\n    if (service == \"input_number.set_value\") {\n        let temp = msg.sp[msg.sp.length - 1].temp; \n        sdata = { value: temp };\n    }\n\n    timeslots.push({\n        start: start, stop: stop, actions:\n            [{\n                service: service,\n                entity_id: id,\n                service_data: sdata\n            }]\n    });\n\n\n    for (let i=0;i < msg.sp.length; i++) {\n        start = msg.sp[i].time+\":00\";\n        stop = \"00:00:00\";\n        try { stop = msg.sp[i+1].time+\":00\"; } catch (e) {}\n\n        let sdata = \"\";\n        if (service == \"climate.set_temperature\") {\n           let temp = msg.sp[i].temp;      \n           sdata = { hvac_mode: \"heat\", temperature: temp };    \n        }\n        if (service == \"select.select_option\") {\n            let mode = msg.sp[i].mode;      \n            sdata = { option: mode }; \n        }\n        if (service == \"input_select.select_option\") {\n            let mode = msg.sp[i].mode;\n            sdata = { option: mode };\n        }\n        if (service == \"input_number.set_value\") {\n            let temp = msg.sp[i].temp;      \n            sdata = { value: temp };\n        }\n\n        timeslots.push({ start: start, stop: stop, actions: \n            [{  service: service, \n                entity_id: id, \n                service_data: sdata }] });\n    }\n}\n\nname = name;\nmsg.payload = { \n    \"entity_id\": entity_id,\n    \"name\": name, \n    \"weekdays\": weekdays, \n    \"timeslots\": timeslots,\n    \"repeat_type\": \"repeat\"\n};\n\nmsg.data = msg.payload;\nmsg.payload = JSON.stringify(msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 200,
        "wires": [
            [
                "926d5eac743f21de"
            ]
        ]
    },
    {
        "id": "926d5eac743f21de",
        "type": "api-call-service",
        "z": "ec85190199f8db30",
        "name": "Update",
        "server": "9a4d97de.389e18",
        "version": 7,
        "debugenabled": false,
        "action": "scheduler.edit",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "labelId": [],
        "data": "{{{payload}}}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "scheduler",
        "service": "edit",
        "x": 1040,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "31b6aa16cddab1e3",
        "type": "function",
        "z": "ec85190199f8db30",
        "name": "read switchprograms",
        "func": "let data = msg.payload;\nlet p = global.get(\"sp_params\");\nlet hc1, hc2, hc3, hc4, dhw, dhwcp;\n\ntry { hc1 = data.hc1.switchprog } catch (e) { };\ntry { hc2 = data.hc2.switchprog } catch (e) { };\ntry { hc3 = data.hc3.switchprog } catch (e) { };\ntry { hc4 = data.hc4.switchprog } catch (e) { };\ntry { dhw = data.dhw.switchprog } catch (e) { };\ntry { dhwcp = data.dhw.circswitchprog } catch (e) { };\n\nif (hc1 != undefined) {\n    msg.sp = hc1;\n    msg.days = p.hc1_days;\n    msg.payload = p.hc1_names;\n    if (hc1[0].temp != undefined) {\n        msg.service = \"input_number.set_value\";\n        msg.id = \"input_number.hc1_sp_temp\";\n    }\n    else {\n        msg.service = \"input_select.select_option\";\n        msg.id = \"input_select.hc1_sp_modes\";\n    }\n    send();\n}\n\nif (hc2 != undefined) {\n    msg.sp = hc2;\n    msg.days = p.hc2_days;\n    msg.payload = p.hc2_names;\n    if (hc2[0].temp != undefined) {\n        msg.service = \"input_number.set_value\";\n        msg.id = \"input_number.hc2_sp_temp\";\n    }\n    else {\n        msg.service = \"input_select.select_option\";\n        msg.id = \"input_select.hc2_sp_modes\";\n    }\n    send();\n}\n\nif (hc3 != undefined) {\n    msg.sp = hc3;\n    msg.days = p.hc3_days;\n    msg.payload = p.hc3_names;\n    if (hc3[0].temp != undefined) {\n        msg.service = \"input_number.set_value\";\n        msg.id = \"input_number.hc3_sp_temp\";\n    }\n    else {\n        msg.service = \"input_select.select_option\";\n        msg.id = \"input_select.hc3_sp_modes\";\n    }\n    send();\n}\n\nif (hc4 != undefined) {\n    msg.sp = hc4;\n    msg.days = p.hc4_days;\n    msg.payload = p.hc4_names;\n    if (hc4[0].temp != undefined) {\n        msg.service = \"input_number.set_value\";\n        msg.id = \"input_number.hc4_sp_temp\";\n    }\n    else {\n        msg.service = \"input_select.select_option\";\n        msg.id = \"input_select.hc4_sp_modes\";\n    }\n    send();\n}\n\nif (dhw != undefined) {\n    msg.sp = dhw;\n    msg.days = p.dhw_days;\n    msg.payload = p.dhw_names;\n    msg.service = \"input_select.select_option\";\n    msg.id = \"input_select.dhw_sp_modes\";\n    send();\n}\n\nif (dhwcp != undefined) {\n    msg.sp = dhwcp;\n    msg.days = p.dhwcp_days;\n    msg.payload = p.dhwcp_names;\n    msg.service = \"input_select.select_option\";\n    msg.id = \"input_select.dhw_cp_sp_modes\";\n    send();\n}\n\n\n\nfunction send() {\n    let sp = msg.sp;\n    let days = msg.days;\n    let names = msg.payload;\n\n    let sp1 = [], sp2 = [];\n    for (let i = 0; i < sp.length; i++) {\n        if (sp[i].day == \"mo\") sp1.push(sp[i]);\n        if (sp[i].day == \"sa\") sp2.push(sp[i]);\n    }\n\n    for (let i = 0; i < days.length; i++) {\n        msg.days = days[i];\n        msg.payload = \"EMS \" + names[i];\n        if (i == 0) msg.sp = sp1;\n        else msg.sp = sp2;\n        node.send(msg);\n    }\n\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 200,
        "wires": [
            [
                "f3516d8302d538d6"
            ]
        ]
    },
    {
        "id": "2d2bd034ce279077",
        "type": "mqtt out",
        "z": "ec85190199f8db30",
        "name": "",
        "topic": "",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "55818f4589a91a79",
        "x": 1030,
        "y": 360,
        "wires": []
    },
    {
        "id": "bf4203027cd1c445",
        "type": "function",
        "z": "ec85190199f8db30",
        "name": "changed?",
        "func": "let hc = \"???\";\nlet entity = msg.data.new_state.attributes.entities[0];\n\nswitch (entity) {\n    case \"input_select.hc1_sp_modes\": hc = \"hc1\";break;\n    case \"input_select.hc2_sp_modes\": hc = \"hc2\";break;\n    case \"input_select.hc3_sp_modes\": hc = \"hc3\";break;\n    case \"input_select.hc4_sp_modes\": hc = \"hc4\";break;\n\n    case \"input_number.hc1_sp_temp\": hc = \"hc1\"; break;\n    case \"input_number.hc2_sp_temp\": hc = \"hc2\"; break;\n    case \"input_number.hc3_sp_temp\": hc = \"hc3\"; break;\n    case \"input_number.hc4_sp_temp\": hc = \"hc4\"; break;\n\n    case \"input_select.dhw_sp_modes\": hc = \"dhw\"; break;\n    case \"input_select.dhw_cp_sp_modes\": hc = \"dhw_cp\"; break;\n\n}\n\nmsg.hc = hc;\n//node.status({ fill: \"green\", shape: \"ring\", text: hc + \" \" +entity });\n\ntry {\nlet times_old = msg.data.old_state.attributes.timeslots;\nlet actions_old = msg.data.old_state.attributes.actions;\nlet service_old = msg.data.old_state.attributes.actions[0].service;\n\nlet times = msg.data.new_state.attributes.timeslots;\nlet actions = msg.data.new_state.attributes.actions;\nlet service = msg.data.new_state.attributes.actions[0].service;\n\nlet changed = false;\nif (JSON.stringify(times_old) != JSON.stringify(times)) changed = true;\nif (JSON.stringify(actions_old) != JSON.stringify(actions)) changed = true;\nif (service_old != service) changed = false;\n\n\nnode.status({ fill: \"green\", shape: \"ring\", text: hc+ \" changed: \"+changed});\n\nif (changed == true) node.send(msg);\n} catch(e) {}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 360,
        "wires": [
            [
                "9ff25de7d784a2bb"
            ]
        ]
    },
    {
        "id": "7f3e3804907689d7",
        "type": "function",
        "z": "ec85190199f8db30",
        "name": "changed?",
        "func": "let data = msg.payload;\nlet time = new Date().toLocaleTimeString([], { hour12: false });\n\nlet text = \"\";\nnode.status({ fill: \"green\", shape: \"ring\", text: time});\n\nlet data_old = global.get(\"switchprograms\");\nif (data_old == undefined) {\n    global.set(\"switchprograms\", msg.payload);\n    return msg;\n}\n\nif (JSON.stringify(data_old) != JSON.stringify(data)) {\n    global.set(\"switchprograms\", msg.payload);\n    return msg;\n}\n\n/*\nlet hc1 = data.hc1.switchprog;\nlet hc2 = data.hc2.switchprog;\nlet dhw = data.dhw.switchprog;\nlet dhwcp = data.dhw.circswitchprog;\n*/\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 200,
        "wires": [
            [
                "31b6aa16cddab1e3"
            ]
        ]
    },
    {
        "id": "916cd94ecaa50c7f",
        "type": "server-state-changed",
        "z": "ec85190199f8db30",
        "name": "",
        "server": "9a4d97de.389e18",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [],
            "substring": [],
            "regex": [
                "switch.schedule_ems_*"
            ]
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": false,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 230,
        "y": 360,
        "wires": [
            [
                "bf4203027cd1c445"
            ]
        ]
    },
    {
        "id": "bd1c26fb35d4aa5f",
        "type": "inject",
        "z": "ec85190199f8db30",
        "name": "Config switchprog",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "init",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "/homeassistant/switchprog.yaml",
        "payloadType": "str",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "d3ba7e34c8eaffa8"
            ]
        ]
    },
    {
        "id": "d3ba7e34c8eaffa8",
        "type": "file in",
        "z": "ec85190199f8db30",
        "name": "",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 420,
        "y": 100,
        "wires": [
            [
                "31cfe2a243789b3d"
            ]
        ]
    },
    {
        "id": "31cfe2a243789b3d",
        "type": "yaml",
        "z": "ec85190199f8db30",
        "property": "payload",
        "name": "",
        "x": 590,
        "y": 100,
        "wires": [
            [
                "331ce67f5b4f5144"
            ]
        ]
    },
    {
        "id": "331ce67f5b4f5144",
        "type": "function",
        "z": "ec85190199f8db30",
        "name": "initial data",
        "func": "// reset switchprograms to detect changes\nif (msg.init) global.set(\"switchprograms\", \"\");\n\nlet p ={};\n\nfor (let i = 0; i< msg.payload[0].parameters.length;i++ ) {\n    let m = msg.payload[0].parameters[i];\n    \n    if (m.hc1_days  != undefined) p.hc1_days = m.hc1_days;\n    if (m.hc1_names != undefined) p.hc1_names = m.hc1_names;\n\n    if (m.hc2_days != undefined) p.hc2_days = m.hc2_days;\n    if (m.hc2_names != undefined) p.hc2_names = m.hc2_names;\n\n    if (m.hc3_days != undefined) p.hc3_days = m.hc3_days;\n    if (m.hc3_names != undefined) p.hc3_names = m.hc3_names;\n\n    if (m.hc4_days != undefined) p.hc4_days = m.hc4_days;\n    if (m.hc4_names != undefined) p.hc4_names = m.hc4_names;\n\n    if (m.dhw_days != undefined) p.dhw_days = m.dhw_days;\n    if (m.dhw_names != undefined) p.dhw_names = m.dhw_names;\n\n    if (m.dhwcp_days != undefined) p.dhwcp_days = m.dhwcp_days;\n    if (m.dhwcp_names != undefined) p.dhwcp_names = m.dhwcp_names;\n\n}\n\nglobal.set(\"sp_params\", p);\nmsg.payload = p;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "9ff25de7d784a2bb",
        "type": "function",
        "z": "ec85190199f8db30",
        "name": "read schedule and prepare updates for EMS-ESP",
        "func": "let hc = msg.hc;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: hc  });\n\nlet r,d;\nlet mode = \"level\";\n\n\nlet times_old = msg.data.new_state.attributes.timeslots;\nlet actions_old = msg.data.new_state.attributes.actions;\n\nlet times = msg.data.new_state.attributes.timeslots;\nlet actions = msg.data.new_state.attributes.actions;\n\nswitch (actions[0].service) {\n    case \"climate.set_temperature\": mode = \"absolute1\";\n    case \"input_number.set_value\": mode = \"absolute2\";\n}\n\nlet start = 0;\nlet end = 0;\nlet weekdays = msg.data.new_state.attributes.weekdays[0];\n\nif (weekdays == \"daily\") {start = 0;end=7};\nif (weekdays == \"workday\") {start = 0;end=5};\nif (weekdays == \"weekend\") {start = 5;end=7};\n\nlet data = [];\nd = {};\n\nmsg.topic = \"ems-esp/thermostat/\"+hc+\"/switchprog\";\nif (hc == \"dhw_cp\") msg.topic = \"ems-esp/thermostat/dhw/circswitchprog\";\n\nfor (let i = start; i < end; i++) {\n    for (let ii = 1; ii < actions.length; ii++) {\n        if (mode == \"absolute1\") r = actions[ii].data.temperature;\n        if (mode == \"absolute2\") r = actions[ii].data.value;\n        if (mode == \"level\") r = actions[ii].data.option;\n\n        if (mode == \"level\") data.push(\n            {\n                day: i, time: times[ii].substring(0, 5),\n                mode: r, no: ii-1\n            });\n        else data.push(\n            {\n                day: i, time: times[ii].substring(0, 5),\n                temp: r, no: ii-1\n            });\n    }\n}\n\nmsg.payload = JSON.stringify(data);\nnode.send(msg);\nawait sleep(10000);\nnode.send(msg);\nawait sleep(20000);\nreturn msg;\n\n\nasync function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 360,
        "wires": [
            [
                "2d2bd034ce279077"
            ]
        ]
    },
    {
        "id": "9a4d97de.389e18",
        "type": "server",
        "name": "Home Assistant",
        "version": 5,
        "addon": true,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": false,
        "cacheJson": true,
        "heartbeat": false,
        "heartbeatInterval": "30",
        "areaSelector": "friendlyName",
        "deviceSelector": "friendlyName",
        "entitySelector": "friendlyName",
        "statusSeparator": "at: ",
        "statusYear": "hidden",
        "statusMonth": "short",
        "statusDay": "numeric",
        "statusHourCycle": "h23",
        "statusTimeFormat": "h:m",
        "enableGlobalContextStore": true
    },
    {
        "id": "55818f4589a91a79",
        "type": "mqtt-broker",
        "name": "mqtt",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]